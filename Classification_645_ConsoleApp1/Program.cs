
// This file was auto-generated by ML.NET Model Builder. 

using Classification_645_ConsoleApp1;
using Microsoft.ML;
using Microsoft.ML.Data;

Random rnd = new Random();

List<float> GenerateSequence(int max)
{
    

    var sequence = new List<float>();
    while (true)
    {
        var rint = rnd.Next(1, 45);
        var found = sequence.Any(x => x == rint);
        if (found) continue;
        else
        {
            sequence.Add(rint);
            if (sequence.Count >= 6) break;
        }
    }
    sequence.Sort();
    return sequence;
}

var used = new List<string>();
var max = new Classification_645.ModelOutput();
var counter = 0;
while (true)
{
    counter++;
    var seq = GenerateSequence(45);
    var strseq = string.Join("-", seq);

    var found = used.Any(x => x == strseq);
    if (found) continue;

    used.Add(strseq);

    // Create single instance of sample data from first line of dataset for model input
    Classification_645.ModelInput sampleData = new Classification_645.ModelInput()
    {
        Slot1 = seq[0],
        Slot2 = seq[1],
        Slot3 = seq[2],
        Slot4 = seq[3],
        Slot5 = seq[4],
        Slot6 = seq[5],
    };

    // Make a single prediction on the sample data and print results
    var predictionResult = Classification_645.Predict(sampleData);

    if (max.Probability <= predictionResult.Probability)
    {
        max = predictionResult;

        Console.WriteLine($"{strseq} {max.PredictedLabel} {max.Probability * 100}");
    }

    if (counter % 100000 == 0)
    {
        Console.WriteLine($"Counter {counter}");
    }
}